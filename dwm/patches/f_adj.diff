// Add these function prototypes in the appropriate section of dwm.c
static void viewtoleft(const Arg *arg);
static void viewtoright(const Arg *arg);
static void tagtoleft(const Arg *arg);
static void tagtoright(const Arg *arg);

// Modify the viewtoleft function
void
viewtoleft(const Arg *arg) {
    if(__builtin_popcount(selmon->tagset[selmon->seltags] & TAGMASK) == 1
    && selmon->tagset[selmon->seltags] > 1) {
        int i;
        unsigned int tmptag;
        selmon->seltags ^= 1; /* toggle sel tagset */
        selmon->tagset[selmon->seltags] = selmon->tagset[selmon->seltags ^ 1] >> 1;
        selmon->pertag->prevtag = selmon->pertag->curtag;
        for (i = 0; !(selmon->tagset[selmon->seltags] & 1 << i); i++) ;
        selmon->pertag->curtag = i + 1;
        selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
        selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
        selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
        selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
        selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
        if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
            togglebar(NULL);
        focus(NULL);
        arrange(selmon);
    }
}

// Modify the viewtoright function
void
viewtoright(const Arg *arg) {
    if(__builtin_popcount(selmon->tagset[selmon->seltags] & TAGMASK) == 1
    && selmon->tagset[selmon->seltags] & (TAGMASK >> 1)) {
        int i;
        unsigned int tmptag;
        selmon->seltags ^= 1; /* toggle sel tagset */
        selmon->tagset[selmon->seltags] = selmon->tagset[selmon->seltags ^ 1] << 1;
        selmon->pertag->prevtag = selmon->pertag->curtag;
        for (i = 0; !(selmon->tagset[selmon->seltags] & 1 << i); i++) ;
        selmon->pertag->curtag = i + 1;
        selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
        selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
        selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
        selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
        selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
        if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
            togglebar(NULL);
        focus(NULL);
        arrange(selmon);
    }
}

// Modify the tagtoleft function
void
tagtoleft(const Arg *arg) {
    if(selmon->sel != NULL
    && __builtin_popcount(selmon->tagset[selmon->seltags] & TAGMASK) == 1
    && selmon->tagset[selmon->seltags] > 1) {
        selmon->sel->tags >>= 1;
        focus(NULL);
        arrange(selmon);
    }
}

// Modify the tagtoright function
void
tagtoright(const Arg *arg) {
    if(selmon->sel != NULL
    && __builtin_popcount(selmon->tagset[selmon->seltags] & TAGMASK) == 1
    && selmon->tagset[selmon->seltags] & (TAGMASK >> 1)) {
        selmon->sel->tags <<= 1;
        focus(NULL);
        arrange(selmon);
    }
}
