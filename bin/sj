#!/usr/bin/env python3

import os
import sys
import sqlite3


def main():
    option = sys.argv[1] if len(sys.argv) > 1 else None
    params = sys.argv[2:] if len(sys.argv) > 2 else []

    if not option or option in ["h", "help"]:
        help(0)
    elif option in ["a", "add"]:
        add(params)
    elif option in ["r", "remove"]:
        remove(params)
    elif option in ["q", "query"]:
        query(params)
    elif option in ["l", "list"]:
        list_all()
    elif option in ["s", "set"]:
        set_val(params)
    else:
        help(1)


def help(exitCode: int):
    bold, underline, reset = "\x1b[1m", "\x1b[4m", "\x1b[0m"
    print(f"""{bold}sj:{reset} a better cd command\n\n{underline}{bold}options:{reset}
    {bold}q, query{reset}\tsearch for a directory in the database
    {bold}a, add{reset}\tadd a new directory or increment its weight
    {bold}r, remove{reset}\tremove a directory from the database
    {bold}s, set{reset}\tset the weight for a specific directory
    {bold}l, list{reset}\tlist all stored directories and their weights
    {bold}h, help{reset}\tdisplay this help message""")
    sys.exit(exitCode)


def init_db():
    os.makedirs(f"{os.path.expanduser('~')}/.local/state", exist_ok=True)
    conn = sqlite3.connect(f"{os.path.expanduser('~')}/.local/state/sj.db")
    cur = conn.cursor()
    cur.execute(
        "CREATE TABLE IF NOT EXISTS hist (dir TEXT PRIMARY KEY, weight INTEGER DEFAULT 1)"
    )
    return cur, conn


def add(params: list[str]):
    cur, conn = init_db()
    try:
        for i in params:
            if not os.path.isdir(i):
                print("invalid dir: ", i)
                continue
            i = os.path.normpath(i)
            res = cur.execute("SELECT * FROM hist WHERE dir = ?", (i,))
            result = res.fetchone()
            if result:
                cur.execute(
                    "UPDATE hist SET weight = ? WHERE dir = ?", (result[1] + 1, i)
                )
            else:
                cur.execute("INSERT INTO hist (dir) VALUES (?)", (i,))
            print("added: ", i)
        conn.commit()
    finally:
        conn.close()


def remove(params: list[str]):
    cur, conn = init_db()
    try:
        for i in params:
            try:
                cur.execute("DELETE FROM hist WHERE dir = ?", (i,))
                print("removed: ", i)
            except sqlite3.Error as e:
                print("error removing: ", e)
        conn.commit()
    finally:
        conn.close()


def query(params: list[str]):
    query_str = "%" + "%".join(params) + "%"
    cur, conn = init_db()
    try:
        res = cur.execute(
            "SELECT * FROM hist WHERE dir LIKE ? ORDER BY weight DESC", (query_str,)
        )
        result = res.fetchall()
        for i in result:
            if not os.path.isdir(i[0]):
                cur.execute("DELETE FROM hist WHERE dir = ?", (i[0],))
                continue
            print(i[0])
            break
        conn.commit()
    finally:
        conn.close()


def list_all():
    cur, conn = init_db()
    try:
        res = cur.execute("SELECT * FROM hist ORDER BY weight DESC")
        result = res.fetchall()
        for i in result:
            print(f"{i[0]} ({i[1]})")
    finally:
        conn.close()


def set_val(params: list[str]):
    if len(params) != 2:
        print("needs directory & weight")
        sys.exit(1)

    dir_path, weight = os.path.normpath(params[0]), params[1]

    try:
        weight = int(weight)
    except ValueError:
        print("it has to be an integer")
        sys.exit(1)

    if not os.path.isdir(dir_path):
        print("invalid dir: ", dir_path)
        sys.exit(1)

    cur, conn = init_db()
    try:
        res = cur.execute("SELECT * FROM hist WHERE dir = ?", (dir_path,))
        result = res.fetchone()
        if result:
            cur.execute("UPDATE hist SET weight = ? WHERE dir = ?", (weight, dir_path))
        else:
            cur.execute(
                "INSERT INTO hist (dir, weight) VALUES (?, ?)", (dir_path, weight)
            )
        print(f"updated: {dir_path} to {weight}")
        conn.commit()
    finally:
        conn.close()


if __name__ == "__main__":
    main()
